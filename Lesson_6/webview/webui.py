import streamlit as st
import requests
import jwt
import logging
import time
# from jose import jwt
from dotenv import load_dotenv
import os

logging.basicConfig(level=logging.INFO)

api_url = "http://app:8080"

load_dotenv()

SECRET_KEY = os.getenv("SECRET_KEY")


def create_access_token(user: str) -> str:
    payload = {
        "user": user,
        "expires": time.time() + 3600
    }
    token = jwt.encode(payload, SECRET_KEY, algorithm="HS256")
    return token


def authenticate(username, password):
    response = requests.post(f"{api_url}/user/signin",
                             data={"username": username, "password": password})
    if response.status_code == 200:
        json_response = response.json()
        logging.info(f"JSON response: {json_response}")
        token = response.json().get("access_token")
        user_id = response.json().get("user_id")
        return token, user_id
    else:
        return None


def verify_access_token(token):
    try:
        jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return True
    except jwt.ExpiredSignatureError:
        logging.error("Token has expired")
    except jwt.InvalidTokenError as e:
        logging.error(f"Invalid token: {e}")


def logout():
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.session_state['redirect_to'] = "–ì–ª–∞–≤–Ω–∞—è"
    st.rerun()


def main_page():
    st.title("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å ¬´–ö–∏–∫—Å—Ç–∞—Ä—Ç–µ—Ä–Ω—ã–π –ù–æ—Å—Ç—Ä–∞–¥–∞–º—É—Å¬ª üîÆ")
    st.write(f"—Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è üìàüìâ"
             f"—É—Å–ø–µ—Ö–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Kickstarter üé∞ "
             f"—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è üíª")
    st.header("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ‚òëÔ∏è")
    username = st.text_input("–õ–æ–≥–∏–Ω", key="user_login")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="user_password")
    if st.button("–í–æ–π—Ç–∏", key="registered_user"):
        token, user_id = authenticate(username, password)
        if token:
            st.success("–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è!")
            st.session_state['token'] = token
            st.session_state['user_id'] = user_id
            st.session_state['username'] = username
            st.session_state['logged_in'] = True
            st.write(
                f"User –ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {st.session_state.get('username')}")
            st.session_state['redirect_to'] = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        st.session_state['redirect_to'] = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
        st.rerun()

    if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"):
        st.session_state['redirect_to'] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        st.rerun()


def registration_page():
    st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
    st.write(f" –ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 100 –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫  üéÅ")
    username = st.text_input("–õ–æ–≥–∏–Ω", key="new_user_login")
    st.session_state['–õ–æ–≥–∏–Ω'] = username
    email = st.text_input("Email", key="new_user_email")
    st.session_state['Email'] = email
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password",
                             key="new_user_password")
    st.session_state['–ü–∞—Ä–æ–ª—å'] = password
    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        response = requests.post(f"{api_url}/user/signup",
                                 json={"username": username,
                                       "email": email,
                                       "password": password})
        if response.status_code == 200:
            st.success(
                "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞...")
            if username:
                token, user_id = authenticate(username, password)
                st.session_state['token'] = token
                st.session_state['user_id'] = user_id
                st.session_state['username'] = username
                st.write(
                    f"User –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {st.session_state.get('username')}")
                st.session_state['user_id'] = user_id
                st.session_state['username'] = username
                st.session_state['logged_in'] = True
                st.session_state['redirect_to'] = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
                st.rerun()
            else:
                st.error(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ username –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            # st.session_state['redirect_to'] = "–ì–ª–∞–≤–Ω–∞—è"
            # st.rerun()

def user_dashboard():
    st.title("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    if 'token' not in st.session_state or 'username' not in st.session_state:
        st.error(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É")
        st.stop()
    token = st.session_state['token']
    user_id = st.session_state['user_id']
    if not verify_access_token(token):
        st.error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        st.stop()

    username = st.session_state.get('username', 'Unknown')

    st.header(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} - ‚úÖ")

    st.header(f"–ë–∞–ª–∞–Ω—Å üí≤")
    response_username = requests.get(f"{api_url}/user/user",
                                     params={"username": username})
    if response_username.status_code == 200:
        user_data = response_username.json()
        user_id = user_data.get('id')

    response = requests.get(f"{api_url}/user/balance/{user_id}")

    if response.status_code == 200:
        balance = response.json().get('balance', 'N/A')
        st.write(f"–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–º: {balance}")
    else:
        st.write("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ")

    st.header("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ üí≥")
    user_id = st.session_state['user_id']
    amount = st.number_input("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", min_value=0, key="summa_add")
    if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"):
        response = requests.post(f"{api_url}/user/balance/add/{user_id}",
                                 params={"amount": amount})
        if response.status_code == 200:
            logging.info(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            st.success("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!")
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

    st.header("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π üîç")
    user_id = st.session_state['user_id']
    response = requests.get(
        f"{api_url}/transaction/transactions_history/{user_id}")
    if response.status_code == 200:
        transaction_history = response.json()
        st.write(transaction_history)


def ml_service_page():
    st.title("ML –°–µ—Ä–≤–∏—Å")
    st.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:  50 –∫—Ä–µ–¥–∏—Ç–æ–≤ üí∏")
    if 'token' not in st.session_state or 'user_id' not in st.session_state:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ ML —Å–µ—Ä–≤–∏—Å—É")
        st.stop()

    token = st.session_state['token']
    if not verify_access_token(token):
        st.error("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        st.stop()

    user_id = st.session_state['user_id']

    st.header("–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    models = ["MLModel"]
    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", models)
    st.write(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_model}")

    if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"):
        response = requests.post(f"{api_url}/model/upload_model",
                                 json={"model_name": "MLModel",
                                       "description": "LogisticRegression"})
        if response.status_code == 200:
            json_response = response.json()
            model_id = json_response.get('model_id', 'N/A')
            st.session_state['model_id'] = model_id
            st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        else:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏")

    if 'model_id' not in st.session_state:
        st.error("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å")
        return

    model_id = st.session_state['model_id']

    st.header("Kickstarter Nostradamus")

    blurb = st.text_input('–û–ø–∏—Å–∞–Ω–∏–µ', 'Chill Magazine is a woman run, print-only literary art magazine for chillers. We need help bringing our third issue to life!')
    currency = st.text_input('–í–∞–ª—é—Ç–∞', 'USD')
    goal = st.number_input('–¶–µ–ª—å', 3500)
    campaign_duration = st.number_input('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 30)
    started_month = st.number_input('–ú–µ—Å—è—Ü —Å—Ç–∞—Ä—Ç–∞', 7)
    category_subcategory = st.text_input('–ö–∞—Ç–µ–≥–æ—Ä–∏—è', 'Publishing Art Books')

    if st.button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'):
        user_id = st.session_state['user_id']
        model_id = st.session_state['model_id']
        st.session_state['task_id'] = None

        input_data = {
            'blurb': blurb,
            'currency': currency,
            'goal': goal,
            'campaign_duration': campaign_duration,
            'started_month': started_month,
            'category_subcategory': category_subcategory
        }

        url = f"{api_url}/task/newtask"
        params = {
            "user_id": user_id,
            "model_id": model_id,
        }

        try:
            response = requests.post(url, params=params, json=input_data)
            # st.write("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (raw text):", response.text)
            if response.status_code == 200:
                json_response = response.json()
                task_id = json_response.get('task_id', 'N/A')
                st.session_state['task_id'] = task_id
                st.session_state['model_id'] = model_id
                st.success(f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, task_id: {task_id}, model_id: {model_id}")
            else:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–¥–∞–Ω–∏—è: {response.status_code}")
                st.write(response.text)

        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")

    if st.button('Predict Success'):
        task_id = st.session_state.get('task_id')
        url = f"{api_url}/task/prediction/{task_id}"

        if task_id:
            response = requests.get(url)
            if response.status_code == 200:
                json_response = response.json()
                output_data = json_response.get('output_data', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                st.success(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {output_data}")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        else:
            st.error("Task ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

    st.header("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π ")
    response = requests.get(f"{api_url}/prediction/{user_id}")
    if response.status_code == 200:
        prediction_history = response.json()
        st.write(prediction_history)


def sidebar_navigation():
    if st.sidebar.button("–ì–ª–∞–≤–Ω–∞—è"):
        st.session_state['redirect_to'] = "–ì–ª–∞–≤–Ω–∞—è"
    if st.sidebar.button("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"):
        st.session_state['redirect_to'] = "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
    if st.sidebar.button("–°–µ—Ä–≤–∏—Å"):
        st.session_state['redirect_to'] = "–°–µ—Ä–≤–∏—Å"
    if st.sidebar.button("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"):
        st.session_state['redirect_to'] = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    if 'logged_in' in st.session_state and st.session_state['logged_in']:
        if st.sidebar.button("–í—ã–π—Ç–∏"):
            logout()


def main():
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    sidebar_navigation()

    if 'redirect_to' in st.session_state:
        if st.session_state['redirect_to'] == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
            user_dashboard()
        elif st.session_state['redirect_to'] == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
            registration_page()
        elif st.session_state['redirect_to'] == "–°–µ—Ä–≤–∏—Å":
            ml_service_page()
        elif st.session_state['redirect_to'] == "–ì–ª–∞–≤–Ω–∞—è":
            main_page()
    elif 'logged_in' in st.session_state and st.session_state['logged_in']:
        user_dashboard()
    else:
        main_page()

if __name__ == "__main__":
    main()
